import pygame
import random

# Initialize the game engine
pygame.init()

# Define colors
BLACK = (0, 0, 0)
WHITE = (255, 255, 255)
RED = (255, 0, 0)
GREEN = (0, 255, 0)
BLUE = (0, 0, 255)

# Set the width and height of the screen (width, height)
size = (700, 500)
screen = pygame.display.set_mode(size)

pygame.display.set_caption("Subway Surf Football")

# Loop until the user clicks the close button
done = False

# Used to manage how fast the screen updates
clock = pygame.time.Clock()

# Define the player
player_width = 40
player_height = 60
player_x = 350
player_y = 400
player_speed = 5

# Define the opponent player
opponent_width = 40
opponent_height = 60
opponent_x = random.randint(0, 700)
opponent_y = -60
opponent_speed = 5

# Define the ball
ball_width = 20
ball_height = 20
ball_x = player_x + player_width // 2 - ball_width // 2
ball_y = player_y - ball_height
ball_speed = 5
ball_held = True

# Define the barriers
barrier_width = 20
barrier_height = 80
barrier_list = []
for i in range(3):
    x = random.randint(0, 700)
    y = random.randint(0, 300)
    barrier = [x, y, barrier_width, barrier_height]
    barrier_list.append(barrier)

# Define the team mates
teammate_width = 40
teammate_height = 60
teammate_list = []
for i in range(3):
    x = random.randint(0, 700)
    y = random.randint(0, 300)
    teammate = [x, y, teammate_width, teammate_height]
    teammate_list.append(teammate)

# Game loop
while not done:
    # Main event loop
    for event in pygame.event.get():
        if event.type == pygame.QUIT:
            done = True

    # Move the opponent player down
    opponent_y += opponent_speed

    # Reset the opponent player if it goes off the screen
    if opponent_y > 500:
        opponent_y = -60
        opponent_x = random.randint(0, 700)

    # Handle player movement
    keys = pygame.key.get_pressed()
    if keys[pygame.K_LEFT]:
        player_x -= player_speed
    if keys[pygame.K_RIGHT]:
        player_x += player_speed
    if keys[pygame.K_UP]:
        player_y -= player_speed
    if keys[pygame.K_DOWN]:
        player_y += player_speed

    # Keep the player on the screen
    if player_x < 0:
        player_x =0
    if player_x > 700 - player_width:
        player_x = 700 - player_width
    if player_y < 0:
        player_y = 0
    if player_y > 500 - player_height:
        player_y = 500 - player_height
    # Move the ball if it's not being held
    if not ball_held:
        ball_x += ball_speed
        ball_y -= ball_speed

    # Check for ball-player collision
    if ball_x > player_x and ball_x < player_x + player_width and ball_y > player_y and ball_y < player_y + player_height:
        ball_held = True
    else:
        ball_held = False

    # Place the ball in the center of the player if it's being held
    if ball_held:
        ball_x = player_x + player_width // 2 - ball_width // 2
        ball_y = player_y - ball_height

    # Check for ball-opponent collision
    if ball_x > opponent_x and ball_x < opponent_x + opponent_width and ball_y > opponent_y and ball_y < opponent_y + opponent_height:
        done = True

    # Check for ball-barrier collisions
    for barrier in barrier_list:
        if ball_x > barrier[0] and ball_x < barrier[0] + barrier_width and ball_y > barrier[1] and ball_y < barrier[1] + barrier_height:
            ball_speed = -ball_speed
            break

    # Check for ball-teammate collisions
    for teammate in teammate_list:
        if ball_x > teammate[0] and ball_x < teammate[0] + teammate_width and ball_y > teammate[1] and ball_y < teammate[1] + teammate_height:
            ball_speed = -ball_speed
            break

    # Clear the screen
    screen.fill(WHITE)

    # Draw the player
    pygame.draw.rect(screen, RED, [player_x, player_y, player_width, player_height])

    # Draw the opponent player
    pygame.draw.rect(screen, BLUE, [opponent_x, opponent_y, opponent_width, opponent_height])

    # Draw the ball
    pygame.draw.rect(screen, BLACK, [ball_x, ball_y, ball_width, ball_height])

    # Draw the barriers
    for barrier in barrier_list:
        pygame.draw.rect(screen, BLACK, barrier)

    # Draw the teammates
    for teammate in teammate_list:
        pygame.draw.rect(screen, GREEN, teammate)

    # Update the screen
    pygame.display.flip()

    # Limit to 60 frames per second
    clock.tick(60)
    
#Quit pygame
pygame.quit()
